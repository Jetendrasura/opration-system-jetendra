#include <stdio.h>

// Process structure
typedef struct {
    int process_id; // Process ID
    int arrival_time; // Arrival time of process
    int burst_time; // Burst time of process
    int priority; // Priority of process
    int completion_time; // Completion time of process
} Process;

// Function to perform Priority Scheduling
void priority_scheduling(Process processes[], int n) {
    int time = 0; // Current time
    int total_completion_time = 0; // Total completion time
    int highest_priority_index; // Index of process with highest priority

    // Continue until all processes are executed
    while (total_completion_time < n) {
        int max_priority = -1; // Initialize maximum priority

        // Find the process with the highest priority
        for (int i = 0; i < n; i++) {
            // Check if process has arrived and its priority is higher than max_priority
            if (processes[i].arrival_time <= time && processes[i].priority > max_priority && processes[i].completion_time == 0) {
                max_priority = processes[i].priority;
                highest_priority_index = i;
            }
        }

        // Execute the process with the highest priority
        time += processes[highest_priority_index].burst_time;
        processes[highest_priority_index].completion_time = time;
        total_completion_time++;

        // Print completion time of the executed process
        printf("Process %d completed at time %d\n", processes[highest_priority_index].process_id, time);
    }

    // Calculate and print average turnaround time
    float avg_turnaround_time = 0;
    for (int i = 0; i < n; i++) {
        avg_turnaround_time += processes[i].completion_time - processes[i].arrival_time;
    }
    avg_turnaround_time /= n;
    printf("Average Turnaround Time: %.2f\n", avg_turnaround_time);
}

int main() {
    int n; // Number of processes
    printf("Enter the number of processes: ");
    scanf("%d", &n);

    Process processes[n]; // Array of processes

    // Input details of each process
    for (int i = 0; i < n; i++) {
        printf("Enter arrival time, burst time, and priority for process %d: ", i + 1);
        scanf("%d %d %d", &processes[i].arrival_time, &processes[i].burst_time, &processes[i].priority);
        processes[i].process_id = i + 1;
        processes[i].completion_time = 0;
    }

    // Perform Priority Scheduling
    priority_scheduling(processes, n);

    return 0;
}
