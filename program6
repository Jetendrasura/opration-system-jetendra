#include<stdio.h>

// Structure to represent a process
typedef struct {
    int id;
    int priority;
    int burst_time;
    int arrival_time;
    int remaining_time;
} Process;

// Function to swap two processes
void swap(Process *a, Process *b) {
    Process temp = *a;
    *a = *b;
    *b = temp;
}

// Function to perform pre-emptive priority scheduling
void preemptivePriorityScheduling(Process processes[], int n) {
    int current_time = 0;
    int completed = 0;
    int current_process = -1; // Index of the currently running process

    while (completed < n) {
        int highest_priority = -1;
        int next_process = -1;

        // Find the process with the highest priority that has arrived
        for (int i = 0; i < n; i++) {
            if (processes[i].arrival_time <= current_time && processes[i].remaining_time > 0) {
                if (processes[i].priority > highest_priority) {
                    highest_priority = processes[i].priority;
                    next_process = i;
                }
            }
        }

        // If no process is found, increment time
        if (next_process == -1) {
            current_time++;
            continue;
        }

        // If a new process is found, switch to it
        if (current_process != next_process) {
            if (current_process != -1)
                printf("Switching from process %d to process %d at time %d\n", processes[current_process].id, processes[next_process].id, current_time);
            current_process = next_process;
        }

        // Execute the current process for 1 unit of time
        processes[current_process].remaining_time--;
        current_time++;

        // If the current process is completed, update completion time and mark it as completed
        if (processes[current_process].remaining_time == 0) {
            printf("Process %d completed at time %d\n", processes[current_process].id, current_time);
            completed++;
        }
    }
}

int main() {
    int n;
    printf("Enter the number of processes: ");
    scanf("%d", &n);

    Process processes[n];

    // Input process details
    for (int i = 0; i < n; i++) {
        printf("Enter details for process %d:\n", i + 1);
        processes[i].id = i + 1;
        printf("Priority: ");
        scanf("%d", &processes[i].priority);
        printf("Burst Time: ");
        scanf("%d", &processes[i].burst_time);
        printf("Arrival Time: ");
        scanf("%d", &processes[i].arrival_time);
        processes[i].remaining_time = processes[i].burst_time;
    }

    // Perform pre-emptive priority scheduling
    preemptivePriorityScheduling(processes, n);

    return 0;
}
